= RCOM communication software.

Simple video communication software that builds on exisiting command line tools to generate and decode video.

*This project is a proof of concept, not a real product yet.*

See: https://github.com/rizsi/rcom

== Download

This README is for version: 0.0.4

Binary build can be downloaded from: http://rizsi.com/programs/rcom/0.0.4

== Features

 * Conference rooms
 * Share WebCam
 * Share audio
 * Share screen (VNC)
 * Each client connects to a single server through a single TCP channel.
 * SSH enabled server: link:rcom-ssh.asciidoc[rcom-ssh]. It is possible to use ssh server for client connections. This way all communications can be made private.

== Dependencies

=== Java 1.8

The binary is compiled to Java 1.7 but 1.8 is better.

=== libspeexdsp

----
$ sudo apt-get install libspeexdsp1
----

=== Programs executed by RCOM

These programs must be installed and accessible by RCOM to work:

Client:

 * *v4l2-ctl* - to list available webcams
 * *ffmpeg* - to stream webcam and to decode video streams
 * *x11vnc* - to share screen through VNC protocol
 * *xvnc4viewer* to show shared VNC screen
 * *ssh* to connect the server through secured channel
 * speexcmd - part of the RCOM but you may have to rebuild it for your system.

Server:

 * *x11vnc* - to re-share screen to multiple clients

To install them all:

 $ sudo apt-get install xvnc4viewer x11vnc ffmpeg v4l-utils

== Quickstart

DO NOT START THIS VERSION ON A PUBLICLY ACCESSIBLE COMPUTER! THIS PROJECT IS A PROOF OF CONCEPT NOW. See Known Security issues!

To see introduction of SSH enabled RCOM server see link:rcom-ssh.asciidoc[rcom-ssh].

Start server on a computer that is accessible from all clients and do not close this terminal window:

 $ java -jar rcom.jar server --host 0.0.0.0

Start client:

 $ PULSE_PROP=filter.want=echo-cancel java -jar rcom.jar gui --connectionString rcomserver.example.com:9643

Launch echo cancellation module manually for Pulse audio (It is not clear why but the PULSE_PROP parameter is not always enough):

````
 $ pactl load-module module-echo-cancel
````

Unload it when not used any longer:

````
 $ pactl unload-module module-echo-cancel
````
 
When the client is running then in the GUI:

 * enter a room by clicking "Room" button
 * tick in "Stream WebCam" then select from the available cameras and formats.
 * tick in "Stream Audio".
 * Write messages to the chat box

Start other client similarly on a different PC.

=== Audio settings

RCOM client simply opens the first available device through the Java sound API. If PulseAudio is used then from the system mixer both the input and the output levels can be controlled.

Audio is streamed unencoded in raw PCM format.

Without a noise canceller the audio is very noisy. It has been tested with PulseAudio built in noise canceller with good results.

Command to run programs with PULSE audio filter enabled (works on current Pulse Audio versions):

$ PULSE_PROP=filter.want=echo-cancel java -jar rcom.jar ...

Or command to run with speex based noise canceller:

$ java -jar rcom.jar --echoCanceller ...

 
=== Known Security issues

Server opens public VNC ports when VNC is streamed. This is due to a problem in the current x11vnc in Ubuntu.

CoolRMI is used for remoting. This remoting framwork is not secure. Only use the program with trusted clients over ssh. See: https://github.com/qgears/opensource-utils/tree/master/coolrmi

VNC transfers control too. The control messages are not yet filtered out from clients. The clients are launched in ViewOnly mode though.


=== VNC

VNC opens public ports on the server. For this reason a firewall must be used to not leak information.

Currently only a single VNC session is supported (dynamic port allocation has to be implemented to support more).

VNC transfers control too. The control messages are not yet filtered out from clients. The clients are launched in ViewOnly mode though.

== link:usage.asciidoc[Usage]

== Build

=== rcom.jar

RCOM is developed using Eclipse. This project and all dependencies must be imported into Eclipse.

Dependencies are:

 * hu.qgears.commons - https://github.com/qgears/opensource-utils/tree/master/commons/hu.qgears.commons
 * hu.qgears.coolrmi - https://github.com/qgears/opensource-utils/tree/feature/coolrmi-nio/coolrmi - this is the nio feature branch that is required to build RCOM
 * hu.qgears.rtemplate.runtime - https://github.com/qgears/rtemplate

The executable jar can be exported from within Eclipse.

=== speexcmd

speexcmd is a little executable built onto speex library: https://github.com/xiph/speexdsp

Install compile dependency:

----
$ sudo apt-get install libspeexdsp-dev
----

Compile the program: https://github.com/rizsi/rcom/tree/master/speexcmd

----
github.com/rcom/speexexample$ gcc -o speexcmd cmd-speexdsp.c -lspeexdsp
----

The executable must be set up on the command line of the rcom.jar program so it is capable to launch it.


